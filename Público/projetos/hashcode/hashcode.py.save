#!/usr/bin/env python3.5
#coding: utf-8

'''
HashCode
'''

import hashlib
from base64 import b64encode, b64decode
import codecs
import binascii
from time import sleep
from sys import exit
import os

Limpar = "reset"

def Apresentacao():
	os.system(Limpar)
	print('''\033[31m

 ▄  █ ██      ▄▄▄▄▄    ▄  █     ▄█▄    ████▄ ██▄   ▄███▄   
█   █ █ █    █     ▀▄ █   █     █▀ ▀▄  █   █ █  █  █▀   ▀  
██▀▀█ █▄▄█ ▄  ▀▀▀▀▄   ██▀▀█     █   ▀  █   █ █   █ ██▄▄    
█   █ █  █  ▀▄▄▄▄▀    █   █     █▄  ▄▀ ▀████ █  █  █▄   ▄▀ 
   █     █               █      ▀███▀        ███▀  ▀███▀   
  ▀     █               ▀                               
       ▀                             \033[1mBy: Magno-Tutor\033[1;m

''')


def Escolha():
	Apresentacao()
	print("""
[\033[1;32m*\033[1;m] Escolha uma das opções abaixo para continuar.

\033[31m1\033[1;m) \033[31mEncode\033[1;m - \033[32mMD5\033[1;m
\033[31m2\033[1;m) \033[31mEncode\033[1;m - \033[32mSha1\033[1;m
\033[31m3\033[1;m) \033[31mEncode\033[1;m - \033[32mSha224\033[1;m
\033[31m4\033[1;m) \033[31mEncode\033[1;m - \033[32mSha256\033[1;m
\033[31m5\033[1;m) \033[31mEncode\033[1;m - \033[32mSha384\033[1;m
\033[31m6\033[1;m) \033[31mEncode\033[1;m - \033[32mSha512\033[1;m
\033[31m7\033[1;m) \033[31mEncode/Decode\033[1;m - \033[32mBase64\033[1;m
\033[31m8\033[1;m) \033[31mEncode/Decode\033[1;m - \033[32mBinário\033[1;m
\033[31m9\033[1;m) \033[31mEncode/Decode\033[1;m - \033[32mHexadecimal\033[1;m
\033[31m0\033[1;m) \033[31mEncode/Decode\033[1;m - \033[32mCifra de César\033[1;m

\033[31mq\033[1;m) Sair
""")
	opcao1 = input("\033[1;36mOpção:\033[1;m ")
	if opcao1 == "1":
		Md5()
	elif opcao1 == "2":
		Sha1()
	elif opcao1 == "3":
		Sha224()
	elif opcao1 == "4":
		Sha256()
	elif opcao1 == "5":
		Sha384()
	elif opcao1 == "6":
		Sha512()
	elif opcao1 == "7":
		Base64()
	elif opcao1 == "8":
		Binario()
	elif opcao1 == "9":
		Hexadecimal()
	elif opcao1 == "0":
		CifraDeCesar()
	elif opcao1 == "q":
		exit(1)
	else:
		ComandoNaoEncontrado()
		input("\n\033[1;36mPressione ENTER para voltar...\033[1;m ")
		Escolha()

def Md5():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira encriptar em MD5\033[1;m: ")
	hash_object = hashlib.md5(mystring.encode())
	print("")
	print(hash_object.hexdigest())
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em MD5 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Md5()
	elif opcao1 == "n":
		Escolha()

def Sha1():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira encriptar em SHA1\033[1;m: ")
	hash_object = hashlib.sha1(mystring.encode())
	print("")
	print(hash_object.hexdigest())
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em SHA1 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Sha1()
	elif opcao1 == "n":
		Escolha()

def Sha224():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira encriptar em SHA224\033[1;m: ")
	hash_object = hashlib.sha224(mystring.encode())
	print("")
	print(hash_object.hexdigest())
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em SHA224 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Sha224()
	elif opcao1 == "n":
		Escolha()

def Sha256():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira encriptar em SHA256\033[1;m: ")
	hash_object = hashlib.sha256(mystring.encode())
	print("")
	print(hash_object.hexdigest())
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em SHA256 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Sha256()
	elif opcao1 == "n":
		Escolha()

def Sha384():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira encriptar em SHA384\033[1;m: ")
	hash_object = hashlib.sha384(mystring.encode())
	print("")
	print(hash_object.hexdigest())
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em SHA384 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Sha384()
	elif opcao1 == "n":
		Escolha()

def Sha512():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira encriptar em SHA512\033[1;m: ")
	hash_object = hashlib.sha512(mystring.encode())
	print("")
	print(hash_object.hexdigest())
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em SHA512 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Sha512()
	elif opcao1 == "n":
			Escolha()

def Base64Encode():
	Apresentacao()
	mystring = str(input("\033[32mColoque o texto que queira transformar em BASE64\033[1;m: ")) 
	print("")
	encode = b64encode(mystring.encode('utf-8')) 
	decode = encode.decode('utf-8')
	print(decode)
	print("") 
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode em BASE64 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Base64Encode()
	elif opcao1 == "n":
		Escolha()

def Base64Decode():
	Apresentacao()
	mystring = str(input("\033[32mColoque o texto que queira desvendar em BASE64\033[1;m: ")) 
	print("")
	decode = b64decode(mystring).decode('utf-8')
	print(decode)
	print("")
	opcao1 = input("\n\033[1;36mDeseja fazer outro decode em BASE64 (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		Base64Decode()
	elif opcao1 == "n":
		Escolha()

def Base64():
	Apresentacao()
	print("""
[\033[1;32m*\033[1;m] Escolha uma das opções abaixo para continuar.

\033[31m1\033[1;m) Encode - Base64
\033[31m2\033[1;m) Decode - Base64
""")
	opcao1 = input("\033[1;36mOpção:\033[1;m ")
	if opcao1 == "1":
		Base64Encode()
	elif opcao1 == "2":
		Base64Decode()


def BinarioEncode(encoding='utf-8', errors='surrogatepass'):
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira transformar em BINÁRIO\033[1;m: ")
	print("")
	bits = bin(int(binascii.hexlify(mystring.encode(encoding, errors)), 16))[2:]
	print(bits.zfill(8 * ((len(bits) + 7) // 8)))
	print("")
	opcao1 = input("\n\033[1;36mDeseja transformar outro texto em BINÁRIO (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		BinarioEncode()
	elif opcao1 == "n":
		Escolha()

def BinarioDecode():
	Apresentacao()
	def texto(encoding='utf-8', errors='surrogatepass'):
		binario = input("\033[32mColoque o texto que queira desvendar em BINÁRIO\033[1;m: ")
		n = int(binario, 2)
		print("")
		print(int2bytes(n).decode(encoding, errors))
		print("")
		opcao1 = input("\n\033[1;36mDeseja desvendar outro texto em BINÁRIO (s/n) ?:\033[1;m ")
		if opcao1 == "s":
			BinarioDecode()
		elif opcao1 == "n":
			Escolha()

	def int2bytes(i):
		hex_string = '%x' % i
		n = len(hex_string)
		return binascii.unhexlify(hex_string.zfill(n + (n & 1)))
	
	texto()


def Binario():
	Apresentacao()
	print("""
[\033[1;32m*\033[1;m] Escolha uma das opções abaixo para continuar.

\033[31m1\033[1;m) Encode - Binário
\033[31m2\033[1;m) Decode - Binário
""")
	opcao1 = input("\033[1;36mOpção:\033[1;m ")
	if opcao1 == "1":
		BinarioEncode()
	elif opcao1 == "2":
		BinarioDecode()


def HexaEncode():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira transformar em HEXADECIMAL\033[1;m: ")
	print("")
	print(" ".join("{:02x}".format(ord(c)) for c in mystring))
	print("")
	opcao1 = input("\n\033[1;36mDeseja transformar outro texto em HEXADECIMAL (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		HexaEncode()
	elif opcao1 == "n":
		Escolha()

def HexaDecode():
	Apresentacao()
	mystring = input("\033[32mColoque o texto que queira desvendar em HEXADECIMAL\033[1;m: ")
	print("")
	decode = bytes.fromhex(mystring).decode('utf-8')
	print(decode)
	opcao1 = input("\n\033[1;36mDeseja fazer outro decode em HEXADECIMAL (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		HexaDecode()
	elif opcao1 == "n":
		Escolha()


def Hexadecimal():
	Apresentacao()
	print("""
[\033[1;32m*\033[1;m] Escolha uma das opções abaixo para continuar.

\033[31m1\033[1;m) Encode - Hexadecimal
\033[31m2\033[1;m) Decode - Hexadecimal
""")
	opcao1 = input("\033[1;36mOpção:\033[1;m ")
	if opcao1 == "1":
		HexaEncode()
	elif opcao1 == "2":
		HexaDecode()


def CifraDeCesar():
	Apresentacao()
	print("""
[\033[1;32m*\033[1;m] Escolha uma das opções abaixo para continuar.

\033[31m1\033[1;m) Encode - Cifra de César
\033[31m2\033[1;m) Decode - Cifra de César
""")
	opcao1 = input("\033[1;36mOpção:\033[1;m ")
	if opcao1 == "1":
		ChamarBloco1()
	elif opcao1 == "2":
		ChamarBloco2()

def cifrar(palavras, chave):
	abc = "abcdefghijklmnopqrstuvwxyz "
	text_cifrado = ''

	for letra in palavras:
		soma = abc.find(letra) + chave
		modulo = int(soma) % len(abc)
		text_cifrado = text_cifrado + str(abc[modulo])

	return text_cifrado


def decifrar(palavras, chave):
	abc = "abcdefghijklmnopqrstuvwxyz "
	text_cifrado = ''

	for letra in palavras:
		soma = abc.find(letra) - chave
		modulo = int(soma) % len(abc)
		text_cifrado = text_cifrado + str(abc[modulo])

	return text_cifrado

def ChamarBloco1():
	Apresentacao()
	c = str(input('\n\033[32mTexo a ser cifrado\033[1;m: ')).lower()
	n = int(input('\033[32mChave numérica\033[1;m: '))
	print("\033[32mResultado\033[1;m:", cifrar(c, n))
	opcao1 = input("\n\033[1;36mDeseja fazer outro encode da CIFRA DE CÉSAR (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		ChamarBloco1()
	elif opcao1 == "n":
		Escolha()

def ChamarBloco2():
	Apresentacao()
	cc = str(input('\n\033[32mTexto para ser decifrado\033[1;m: ')).lower()
	cn = int(input('\033[32mChave numérica\033[1;m: '))
	print("\033[32mResultado\033[1;m:", decifrar(cc, cn))
	opcao1 = input("\n\033[1;36mDeseja fazer outro decode da CIFRA DE CÉSAR (s/n) ?:\033[1;m ")
	if opcao1 == "s":
		ChamarBloco2()
	elif opcao1 == "n":
		Escolha()


def ComandoNaoEncontrado():
	print("""
[\033[1;91m!\033[1;m] Desculpe, mas o comando não foi encontrado.
[\033[1;91m!\033[1;m] Caso o problema persista, relate ao desenvolvedor.

""")

Escolha()